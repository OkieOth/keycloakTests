apply plugin: 'java'

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'de.oth.keycloak.InitKeycloakServer'
}



repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    testCompile 'junit:junit:4.10'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.9'
    compile 'org.keycloak:keycloak-admin-client:2.4.0.Final'
    compile 'org.jboss.resteasy:resteasy-client:3.0.15.Final'
    compile 'org.jboss.resteasy:resteasy-jackson2-provider:3.0.15.Final'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
}

clean {
    delete "${buildDir}/release"
}

task dependenciesToLibDir(type: Copy) {
    into "$buildDir/release/lib"
    from configurations.runtime
}

task buildRelease (type: Copy) {
    into "${buildDir}/release/lib"
    from "${buildDir}/libs"
    
    copy {
        from "${project.rootDir}/src/main/bin"
        into "${buildDir}/release"
        include 'InitForGrantMaster.sh'
    } 
    copy {
        from "${project.rootDir}/src/main/conf"
        into "${buildDir}/release/conf"
    }
}

task myRun (type: JavaExec, dependsOn: classes){
    if(project.hasProperty('myArgs')){
        args(myArgs.split(','))
    }
    if (project.hasProperty('DEBUG')) {
        jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }
    main = "de.oth.keycloak.InitKeycloakServer"
    classpath = sourceSets.main.runtimeClasspath
}

dependenciesToLibDir.dependsOn jar
buildRelease.dependsOn dependenciesToLibDir

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/java')
        }
        resources.srcDir file('src/test/resources')
    }
}

task integrationTest(type: Test) {
    def composeName='initkeycloakserverintegrationtests'
    def composeFile="${project.rootDir}/docker-compose/testInitKeycloak/docker-compose.yml"
    def keycloakContName="${composeName}_keycloak_1"
    doFirst {
        // start the docker container with keycloak server and postgresql backend
        println 'before integration tests - ' + new Date().getTime()
        def sout = new StringBuffer()
        def serr = new StringBuffer()
        def process = ['docker-compose','-f',composeFile,
        '-p',composeName,'up','-d'].execute()
        process.consumeProcessOutput(sout,serr)
        process.waitFor()
        sleep 1
        def exitValue = process.exitValue();
        println "container start exit value: $exitValue\n$sout<--"
        if (exitValue != 0) {
            if (sout) {
                println "error (1) while docker run ...\n${sout}"
            }
        }
        // wait for keycloak startup ...
        boolean started=false
        int loopCount=0;
        while ((!started) && (loopCount<30)) {
            loopCount++
            ['docker', 'logs', keycloakContName].execute().in.eachLine {
                if (it.indexOf('Admin console listening on http') != -1) {
                    started=true
                }
            }
        }
        println 'keycloak server started'
        // ... keycloak is up or error
        // add initial user to keycloak ... is needed because the keycloak container is created every run new
        println 'try to add new admin user'
        ['docker','exec',keycloakContName,'keycloak/bin/add-user-keycloak.sh','--user','batman','--password','robinSucksToo'].execute().waitFor()
        println 'restart container'
        ['docker-compose','-f',composeFile,'-p',composeName,'stop'].execute().waitFor()
        ['docker-compose','-f',composeFile,'-p',composeName,'start'].execute().waitFor()
        println 'test container started'
    }
    
    doLast {
        // stop docker container
        def sout = new StringBuffer()
        def serr = new StringBuffer()
        def proc = ['docker-compose','-f',composeFile,
         '-p',composeName,'down'].execute()
        proc.consumeProcessOutput(sout,serr)
        proc.waitForOrKill(20000)
        println "out: $sout \n err: $serr"
        println 'after integration tests - ' + new Date().getTime()
    }
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test